{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/particlex/source/css/main.css","path":"css/main.css","modified":1,"renderable":1},{"_id":"themes/particlex/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/particlex/source/images/background.jpg","path":"images/background.jpg","modified":1,"renderable":1},{"_id":"themes/particlex/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/particlex/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/particlex/source/js/lib/crypto.js","path":"js/lib/crypto.js","modified":1,"renderable":1},{"_id":"themes/particlex/source/js/lib/home.js","path":"js/lib/home.js","modified":1,"renderable":1},{"_id":"themes/particlex/source/js/lib/highlight.js","path":"js/lib/highlight.js","modified":1,"renderable":1},{"_id":"themes/particlex/source/js/lib/math.js","path":"js/lib/math.js","modified":1,"renderable":1},{"_id":"themes/particlex/source/js/lib/search.js","path":"js/lib/search.js","modified":1,"renderable":1},{"_id":"themes/particlex/source/js/lib/preview.js","path":"js/lib/preview.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"73fa8bec9f7f8ad663e0d0d93d26ec3624bbe894","modified":1745586550621},{"_id":"themes/particlex/.gitignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1745516317741},{"_id":"themes/particlex/LICENSE","hash":"c42335f46096b2ec5509087ab122e5dfd43e2cf4","modified":1745516317741},{"_id":"themes/particlex/README.md","hash":"19b124670bc5c9aa8cff0fc191be1e9a40c841a0","modified":1745516317741},{"_id":"themes/particlex/_config.yml","hash":"c7fa12466c56a5058c6f687d01c5041195772c62","modified":1745516317745},{"_id":"themes/particlex/.npmignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1745516317741},{"_id":"themes/particlex/package.json","hash":"db00b08d699e394ba9c88edcf280792075e35654","modified":1745516317747},{"_id":"themes/particlex/pnpm-lock.yaml","hash":"4c7a4f39b776af75374d0dc6f6619dcbf0e58b97","modified":1745516317747},{"_id":"themes/particlex/layout/card.ejs","hash":"65e0c46a79c02212982c8a9aef1b16bfc3430429","modified":1745516317745},{"_id":"themes/particlex/.github/dependabot.yml","hash":"d2adc8df9ae7f28520d2fd5c0579e75dbe352bdc","modified":1745516317740},{"_id":"themes/particlex/layout/archives.ejs","hash":"c3878ffe435aa37ba46a0ee25c34257c2f2a1d87","modified":1745516317745},{"_id":"themes/particlex/layout/categories.ejs","hash":"73ff20a582c72e7cf138c7b42006447e4a2e110a","modified":1745516317745},{"_id":"themes/particlex/layout/current.ejs","hash":"4e75c06c9d0b1336c69c210567581e7efded5621","modified":1745516317746},{"_id":"themes/particlex/layout/comment.ejs","hash":"267809e50962af7ab6bc5892855f765d754a62e4","modified":1745516317745},{"_id":"themes/particlex/layout/footer.ejs","hash":"357b2db2eab031150e06dd47695dc9916d875fc4","modified":1745516317746},{"_id":"themes/particlex/layout/import.ejs","hash":"7800720150b46a9abaf513316602a05293b3991b","modified":1745516317746},{"_id":"themes/particlex/layout/index.ejs","hash":"e7c208f1d9c0acb24f20180ffa45f48ee5ea5d71","modified":1745516317746},{"_id":"themes/particlex/layout/layout.ejs","hash":"bc6f2c3c0a47b755590f3345ef6159d58b29683f","modified":1745516317746},{"_id":"themes/particlex/layout/post.ejs","hash":"a3e567ac00d1ccd8a84525d20665318248da75a7","modified":1745516317747},{"_id":"themes/particlex/layout/posts.ejs","hash":"18209210f37d7e8775ca54e4724ce66ad09d873f","modified":1745516317747},{"_id":"themes/particlex/layout/tags.ejs","hash":"f5b821d45f2f44443adade62eb032f92215e0d62","modified":1745516317747},{"_id":"themes/particlex/source/css/main.css","hash":"ff49d90e3eb12de20b68a95c028a44d8d5f28a2e","modified":1745516317747},{"_id":"themes/particlex/layout/menu.ejs","hash":"1c78bd05cdfb3ae7a47ed572229a1970335fe8b8","modified":1745516317746},{"_id":"themes/particlex/source/images/loading.gif","hash":"9c840c5c3e7b97a184deb390df2f6926d6161708","modified":1745516317754},{"_id":"themes/particlex/source/js/main.js","hash":"420d9ab7f2e0cb44bdc5335389344ec1e7253db5","modified":1745516317756},{"_id":"themes/particlex/source/js/lib/crypto.js","hash":"3db8692ac636d9f72dc94127216d21f9793e6602","modified":1745516317754},{"_id":"themes/particlex/source/js/lib/home.js","hash":"5ec113e1d72efaab5eb31addc05eb9dcf26ce1af","modified":1745516317756},{"_id":"themes/particlex/source/js/lib/math.js","hash":"f7716e83ef236818239fcae91defe730d5bfbc6d","modified":1745516317756},{"_id":"themes/particlex/source/js/lib/search.js","hash":"d507facc680300c046f2b967279959541313e1f9","modified":1745516317756},{"_id":"themes/particlex/source/js/lib/highlight.js","hash":"eea911ac7705d64aefcf67bb50bf223ec6ea9a0e","modified":1745586536431},{"_id":"themes/particlex/source/js/lib/preview.js","hash":"d3050c6ed6d52e451cc1810843c5d595eadb8e5a","modified":1745516317756},{"_id":"themes/particlex/source/images/avatar.jpg","hash":"cd5b921252d1a4f15e17858f4f816ba768a6acf7","modified":1745516317749},{"_id":"themes/particlex/source/images/background.jpg","hash":"d4cd5b1193bcf15f9420ee92a321ab62b5b8c452","modified":1745516317753},{"_id":"public/2025/04/25/hello-world/index.html","hash":"70bd5e123cd3507d47bf1ff51dc8ac918b70999d","modified":1745589411915},{"_id":"public/archives/index.html","hash":"3f97ec6e9c5793582036f02ad2f605f8654fb0b5","modified":1745589411915},{"_id":"public/archives/2025/index.html","hash":"3f97ec6e9c5793582036f02ad2f605f8654fb0b5","modified":1745589411915},{"_id":"public/archives/2025/04/index.html","hash":"3f97ec6e9c5793582036f02ad2f605f8654fb0b5","modified":1745589411915},{"_id":"public/index.html","hash":"1e2b3d8cfefdcd8b76a015e7f7ad8a0a6ce85898","modified":1745589411915},{"_id":"public/images/loading.gif","hash":"9c840c5c3e7b97a184deb390df2f6926d6161708","modified":1745589411915},{"_id":"public/css/main.css","hash":"444ff8856c320913dde037c43f24bba18ef4d741","modified":1745589411915},{"_id":"public/js/main.js","hash":"a9cb52bac89783c3957c77cbb4ffc8fbb93a92a1","modified":1745589411915},{"_id":"public/js/lib/highlight.js","hash":"352e92b2d2b98ca2e9b6281415a0808191d7b26c","modified":1745589411915},{"_id":"public/js/lib/crypto.js","hash":"bc4a0c41cf5b61faa204a2a820fc042b563142cf","modified":1745589411915},{"_id":"public/js/lib/home.js","hash":"c2bf22772fd052cff88a9b5f547a30a6eb97e545","modified":1745589411915},{"_id":"public/js/lib/search.js","hash":"b631b87fa126a9a4a81b60b1a0516f765879963e","modified":1745589411915},{"_id":"public/js/lib/preview.js","hash":"595cfc3aff107b8dd0fdda214995c6f1bb5be39a","modified":1745589411915},{"_id":"public/js/lib/math.js","hash":"24c182cd3f5dd1c0f0192ca4cc143de71e076d2a","modified":1745589411915},{"_id":"public/images/avatar.jpg","hash":"cd5b921252d1a4f15e17858f4f816ba768a6acf7","modified":1745589411915},{"_id":"public/images/background.jpg","hash":"d4cd5b1193bcf15f9420ee92a321ab62b5b8c452","modified":1745589411915}],"Category":[],"Data":[],"Page":[],"Post":[{"_content":"## asd\n```php\n\n\n<?php\nnamespace app\\service;\n\nuse app\\admin\\model\\article\\ContentRule;\nuse app\\common\\model\\Attachment;\nuse QL\\QueryList;\nuse think\\Cache;\nuse think\\Db;\nuse think\\Exception;\n\nclass ArticleDetailService\n{\n    private static $REGEX_RULES = [\n        // 规则1: 删除src以/开头的<img>标签 (不区分大小写，.匹配换行)\n        'img_rule' => '/<img\\s+[^>]*?src\\s*=\\s*[\"\\']\\/[^\"\\']*[\"\\'][^>]*>/is',\n\n        // 规则2: 删除包含XSMB123.com的<p>标签 (不区分大小写，.匹配换行)\n        'p_rule' => '/<p\\b[^>]*>(?:(?!<\\/p>).)*?XSMB123\\.com.*?<\\/p>/is',\n\n        // 规则3: 删除特定div标签 (.匹配换行)\n        'div_rule' => '/<div\\s+class=\"bg-info-subtle\\s+rounded\\s+p-3\\s+mb-3\\s+fs-6\"[^>]*>.*?<\\/div>/s'\n    ];\n\n    public function cleanContent($content, $nav = null)\n    {\n        $content = preg_replace('/<a.*?>/', '', $content);\n        $content = str_replace('</a>', '', $content);\n        if($nav){\n            $content = preg_replace('/<nav>.*<\\/nav>/is', $nav, $content);\n        }\n        // 第一层：删除特定div\n        $content = preg_replace(self::$REGEX_RULES['div_rule'], '', $content);\n        // 第二层：删除包含XSMB123的段落\n        $content = preg_replace(self::$REGEX_RULES['p_rule'], '', $content);\n        // 第三层：删除本地图片\n        $content = preg_replace(self::$REGEX_RULES['img_rule'], '', $content);\n\n        return $content;\n\n    }\n\n    public function celanXsmbContent($content)\n    {\n        $content = preg_replace('/<a.*?>/', '', $content);\n        $content = str_replace('</a>', '', $content);\n        // 第一层：删除特定div\n        $content = preg_replace(self::$REGEX_RULES['div_rule'], '', $content);\n        // 第二层：删除包含XSMB123的段落\n        $content = preg_replace(self::$REGEX_RULES['p_rule'], '', $content);\n        // 第三层：删除本地图片\n        $content = preg_replace(self::$REGEX_RULES['img_rule'], '', $content);\n\n        return $content;\n    }\n\n    public function getSoiDetail($articleInfo)\n    {\n        $link = $articleInfo['origin_link'];\n        $html = Db::name('sprider_html')\n            ->field(\"id,html\")->where('link', $link)->find();\n\n        if (!empty($html)) {\n            $html = $html['html'];\n        } else {\n            $html = CommonService::httpCurl($link);\n            Db::name('sprider_html')->insert(['link' => $link, 'html' => $html]);\n        }\n\n        $ql = QueryList::html($html);\n        $content = $ql->find('.content')->html();\n\n\n        $nav = $ql->find('#ez-toc-container nav')->html();\n        $nav = \"<nav>\" . $nav . \"</nav>\";\n        $content = $this->cleanContent($content, $nav);\n        $update = [\n            'is_detail' => 1,\n            'content' => $content,\n        ];\n        Db::name('sprider_article')\n            ->where('id', $articleInfo['id'])\n            ->update($update);\n        return ['res' => 1, 'msg' => '更新文章详情成功'];\n    }\n\n    public function getXsmbDetail($articleInfo)\n    {\n        $link = $articleInfo['origin_link'];\n        $html = Db::name('sprider_html')\n            ->field(\"id,html\")->where('link', $link)->find();\n\n        $html = $this->http_curl($link);\n        //Db::name('sprider_html')->insert(['link'=>$link,'html'=>$html]);\n\n        $ql = QueryList::html($html);\n\n        $content = $ql->find('.the__article')->html();\n\n        $header = $ql->find('.list__subpage')->html();\n        $content = str_replace($header, ' ', $content);\n        $imgIcon = $ql->find('.align-items-center')->html();\n\n        $content = str_replace($imgIcon, ' ', $content);\n\n        $ads = $ql->find('.adsbygoogle')->htmls()->toArray();\n\n        if ($ads) {\n            foreach ($ads as $item) {\n                if ($item) {\n                    $content = str_replace($item, ' ', $content);\n                }\n            }\n        }\n\n        $content = $this->cleanContent($content);\n        $update = [\n            'is_detail' => 1,\n            'content' => $content,\n        ];\n\n        //更换face\n        /*\n        $chnanelId = $articleInfo['channel_id'];\n        $chnanelFace = config('temp.chanel_to_face');\n        $cate = $chnanelFace[$chnanelId] ?? '';\n\n        if($cate) {\n            $info = Db::name('attachment')\n                ->field('url')\n                ->where(['category' => $cate])\n                ->orderRaw('rand()')\n                ->find();\n\n            var_dump($info);exit;\n        }\n        */\n\n\n        Db::name('sprider_article')\n            ->where('id', $articleInfo['id'])\n            ->update($update);\n        return ['res' => 1, 'msg' => '更新文章详情成功'];\n    }\n\n    function http_curl($url)\n    {\n\n        // 1. 初始化\n        $ch = curl_init();\n        // 2. 设置选项，包括URL\n        curl_setopt($ch, CURLOPT_URL, $url);\n        //curl_setopt($ch,CURLOPT_HEADER,0);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);//测试号写上这个是跳过SSL证书检查，返回结果才不会null;\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);//禁止curl资源直接输出\n        // 3.抓取url并把它传递给服务器\n        $opt = curl_exec($ch);\n        // 4. 释放curl句柄\n        curl_close($ch);\n        return $opt;\n    }\n\n\n}\n```","source":"_posts/hello-world.md","raw":"## asd\n```php\n\n\n<?php\nnamespace app\\service;\n\nuse app\\admin\\model\\article\\ContentRule;\nuse app\\common\\model\\Attachment;\nuse QL\\QueryList;\nuse think\\Cache;\nuse think\\Db;\nuse think\\Exception;\n\nclass ArticleDetailService\n{\n    private static $REGEX_RULES = [\n        // 规则1: 删除src以/开头的<img>标签 (不区分大小写，.匹配换行)\n        'img_rule' => '/<img\\s+[^>]*?src\\s*=\\s*[\"\\']\\/[^\"\\']*[\"\\'][^>]*>/is',\n\n        // 规则2: 删除包含XSMB123.com的<p>标签 (不区分大小写，.匹配换行)\n        'p_rule' => '/<p\\b[^>]*>(?:(?!<\\/p>).)*?XSMB123\\.com.*?<\\/p>/is',\n\n        // 规则3: 删除特定div标签 (.匹配换行)\n        'div_rule' => '/<div\\s+class=\"bg-info-subtle\\s+rounded\\s+p-3\\s+mb-3\\s+fs-6\"[^>]*>.*?<\\/div>/s'\n    ];\n\n    public function cleanContent($content, $nav = null)\n    {\n        $content = preg_replace('/<a.*?>/', '', $content);\n        $content = str_replace('</a>', '', $content);\n        if($nav){\n            $content = preg_replace('/<nav>.*<\\/nav>/is', $nav, $content);\n        }\n        // 第一层：删除特定div\n        $content = preg_replace(self::$REGEX_RULES['div_rule'], '', $content);\n        // 第二层：删除包含XSMB123的段落\n        $content = preg_replace(self::$REGEX_RULES['p_rule'], '', $content);\n        // 第三层：删除本地图片\n        $content = preg_replace(self::$REGEX_RULES['img_rule'], '', $content);\n\n        return $content;\n\n    }\n\n    public function celanXsmbContent($content)\n    {\n        $content = preg_replace('/<a.*?>/', '', $content);\n        $content = str_replace('</a>', '', $content);\n        // 第一层：删除特定div\n        $content = preg_replace(self::$REGEX_RULES['div_rule'], '', $content);\n        // 第二层：删除包含XSMB123的段落\n        $content = preg_replace(self::$REGEX_RULES['p_rule'], '', $content);\n        // 第三层：删除本地图片\n        $content = preg_replace(self::$REGEX_RULES['img_rule'], '', $content);\n\n        return $content;\n    }\n\n    public function getSoiDetail($articleInfo)\n    {\n        $link = $articleInfo['origin_link'];\n        $html = Db::name('sprider_html')\n            ->field(\"id,html\")->where('link', $link)->find();\n\n        if (!empty($html)) {\n            $html = $html['html'];\n        } else {\n            $html = CommonService::httpCurl($link);\n            Db::name('sprider_html')->insert(['link' => $link, 'html' => $html]);\n        }\n\n        $ql = QueryList::html($html);\n        $content = $ql->find('.content')->html();\n\n\n        $nav = $ql->find('#ez-toc-container nav')->html();\n        $nav = \"<nav>\" . $nav . \"</nav>\";\n        $content = $this->cleanContent($content, $nav);\n        $update = [\n            'is_detail' => 1,\n            'content' => $content,\n        ];\n        Db::name('sprider_article')\n            ->where('id', $articleInfo['id'])\n            ->update($update);\n        return ['res' => 1, 'msg' => '更新文章详情成功'];\n    }\n\n    public function getXsmbDetail($articleInfo)\n    {\n        $link = $articleInfo['origin_link'];\n        $html = Db::name('sprider_html')\n            ->field(\"id,html\")->where('link', $link)->find();\n\n        $html = $this->http_curl($link);\n        //Db::name('sprider_html')->insert(['link'=>$link,'html'=>$html]);\n\n        $ql = QueryList::html($html);\n\n        $content = $ql->find('.the__article')->html();\n\n        $header = $ql->find('.list__subpage')->html();\n        $content = str_replace($header, ' ', $content);\n        $imgIcon = $ql->find('.align-items-center')->html();\n\n        $content = str_replace($imgIcon, ' ', $content);\n\n        $ads = $ql->find('.adsbygoogle')->htmls()->toArray();\n\n        if ($ads) {\n            foreach ($ads as $item) {\n                if ($item) {\n                    $content = str_replace($item, ' ', $content);\n                }\n            }\n        }\n\n        $content = $this->cleanContent($content);\n        $update = [\n            'is_detail' => 1,\n            'content' => $content,\n        ];\n\n        //更换face\n        /*\n        $chnanelId = $articleInfo['channel_id'];\n        $chnanelFace = config('temp.chanel_to_face');\n        $cate = $chnanelFace[$chnanelId] ?? '';\n\n        if($cate) {\n            $info = Db::name('attachment')\n                ->field('url')\n                ->where(['category' => $cate])\n                ->orderRaw('rand()')\n                ->find();\n\n            var_dump($info);exit;\n        }\n        */\n\n\n        Db::name('sprider_article')\n            ->where('id', $articleInfo['id'])\n            ->update($update);\n        return ['res' => 1, 'msg' => '更新文章详情成功'];\n    }\n\n    function http_curl($url)\n    {\n\n        // 1. 初始化\n        $ch = curl_init();\n        // 2. 设置选项，包括URL\n        curl_setopt($ch, CURLOPT_URL, $url);\n        //curl_setopt($ch,CURLOPT_HEADER,0);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);//测试号写上这个是跳过SSL证书检查，返回结果才不会null;\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);//禁止curl资源直接输出\n        // 3.抓取url并把它传递给服务器\n        $opt = curl_exec($ch);\n        // 4. 释放curl句柄\n        curl_close($ch);\n        return $opt;\n    }\n\n\n}\n```","slug":"hello-world","published":1,"date":"2025-04-25T12:31:39.832Z","updated":"2025-04-25T13:09:10.621Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cm9wuv6kq0000b86m8tvo3d0v","content":"<h2 id=\"asd\"><a href=\"#asd\" class=\"headerlink\" title=\"asd\"></a>asd</h2><pre><code class=\"language-php\">\n\n&lt;?php\nnamespace app\\service;\n\nuse app\\admin\\model\\article\\ContentRule;\nuse app\\common\\model\\Attachment;\nuse QL\\QueryList;\nuse think\\Cache;\nuse think\\Db;\nuse think\\Exception;\n\nclass ArticleDetailService\n&#123;\n    private static $REGEX_RULES = [\n        // 规则1: 删除src以/开头的&lt;img&gt;标签 (不区分大小写，.匹配换行)\n        &#39;img_rule&#39; =&gt; &#39;/&lt;img\\s+[^&gt;]*?src\\s*=\\s*[&quot;\\&#39;]\\/[^&quot;\\&#39;]*[&quot;\\&#39;][^&gt;]*&gt;/is&#39;,\n\n        // 规则2: 删除包含XSMB123.com的&lt;p&gt;标签 (不区分大小写，.匹配换行)\n        &#39;p_rule&#39; =&gt; &#39;/&lt;p\\b[^&gt;]*&gt;(?:(?!&lt;\\/p&gt;).)*?XSMB123\\.com.*?&lt;\\/p&gt;/is&#39;,\n\n        // 规则3: 删除特定div标签 (.匹配换行)\n        &#39;div_rule&#39; =&gt; &#39;/&lt;div\\s+class=&quot;bg-info-subtle\\s+rounded\\s+p-3\\s+mb-3\\s+fs-6&quot;[^&gt;]*&gt;.*?&lt;\\/div&gt;/s&#39;\n    ];\n\n    public function cleanContent($content, $nav = null)\n    &#123;\n        $content = preg_replace(&#39;/&lt;a.*?&gt;/&#39;, &#39;&#39;, $content);\n        $content = str_replace(&#39;&lt;/a&gt;&#39;, &#39;&#39;, $content);\n        if($nav)&#123;\n            $content = preg_replace(&#39;/&lt;nav&gt;.*&lt;\\/nav&gt;/is&#39;, $nav, $content);\n        &#125;\n        // 第一层：删除特定div\n        $content = preg_replace(self::$REGEX_RULES[&#39;div_rule&#39;], &#39;&#39;, $content);\n        // 第二层：删除包含XSMB123的段落\n        $content = preg_replace(self::$REGEX_RULES[&#39;p_rule&#39;], &#39;&#39;, $content);\n        // 第三层：删除本地图片\n        $content = preg_replace(self::$REGEX_RULES[&#39;img_rule&#39;], &#39;&#39;, $content);\n\n        return $content;\n\n    &#125;\n\n    public function celanXsmbContent($content)\n    &#123;\n        $content = preg_replace(&#39;/&lt;a.*?&gt;/&#39;, &#39;&#39;, $content);\n        $content = str_replace(&#39;&lt;/a&gt;&#39;, &#39;&#39;, $content);\n        // 第一层：删除特定div\n        $content = preg_replace(self::$REGEX_RULES[&#39;div_rule&#39;], &#39;&#39;, $content);\n        // 第二层：删除包含XSMB123的段落\n        $content = preg_replace(self::$REGEX_RULES[&#39;p_rule&#39;], &#39;&#39;, $content);\n        // 第三层：删除本地图片\n        $content = preg_replace(self::$REGEX_RULES[&#39;img_rule&#39;], &#39;&#39;, $content);\n\n        return $content;\n    &#125;\n\n    public function getSoiDetail($articleInfo)\n    &#123;\n        $link = $articleInfo[&#39;origin_link&#39;];\n        $html = Db::name(&#39;sprider_html&#39;)\n            -&gt;field(&quot;id,html&quot;)-&gt;where(&#39;link&#39;, $link)-&gt;find();\n\n        if (!empty($html)) &#123;\n            $html = $html[&#39;html&#39;];\n        &#125; else &#123;\n            $html = CommonService::httpCurl($link);\n            Db::name(&#39;sprider_html&#39;)-&gt;insert([&#39;link&#39; =&gt; $link, &#39;html&#39; =&gt; $html]);\n        &#125;\n\n        $ql = QueryList::html($html);\n        $content = $ql-&gt;find(&#39;.content&#39;)-&gt;html();\n\n\n        $nav = $ql-&gt;find(&#39;#ez-toc-container nav&#39;)-&gt;html();\n        $nav = &quot;&lt;nav&gt;&quot; . $nav . &quot;&lt;/nav&gt;&quot;;\n        $content = $this-&gt;cleanContent($content, $nav);\n        $update = [\n            &#39;is_detail&#39; =&gt; 1,\n            &#39;content&#39; =&gt; $content,\n        ];\n        Db::name(&#39;sprider_article&#39;)\n            -&gt;where(&#39;id&#39;, $articleInfo[&#39;id&#39;])\n            -&gt;update($update);\n        return [&#39;res&#39; =&gt; 1, &#39;msg&#39; =&gt; &#39;更新文章详情成功&#39;];\n    &#125;\n\n    public function getXsmbDetail($articleInfo)\n    &#123;\n        $link = $articleInfo[&#39;origin_link&#39;];\n        $html = Db::name(&#39;sprider_html&#39;)\n            -&gt;field(&quot;id,html&quot;)-&gt;where(&#39;link&#39;, $link)-&gt;find();\n\n        $html = $this-&gt;http_curl($link);\n        //Db::name(&#39;sprider_html&#39;)-&gt;insert([&#39;link&#39;=&gt;$link,&#39;html&#39;=&gt;$html]);\n\n        $ql = QueryList::html($html);\n\n        $content = $ql-&gt;find(&#39;.the__article&#39;)-&gt;html();\n\n        $header = $ql-&gt;find(&#39;.list__subpage&#39;)-&gt;html();\n        $content = str_replace($header, &#39; &#39;, $content);\n        $imgIcon = $ql-&gt;find(&#39;.align-items-center&#39;)-&gt;html();\n\n        $content = str_replace($imgIcon, &#39; &#39;, $content);\n\n        $ads = $ql-&gt;find(&#39;.adsbygoogle&#39;)-&gt;htmls()-&gt;toArray();\n\n        if ($ads) &#123;\n            foreach ($ads as $item) &#123;\n                if ($item) &#123;\n                    $content = str_replace($item, &#39; &#39;, $content);\n                &#125;\n            &#125;\n        &#125;\n\n        $content = $this-&gt;cleanContent($content);\n        $update = [\n            &#39;is_detail&#39; =&gt; 1,\n            &#39;content&#39; =&gt; $content,\n        ];\n\n        //更换face\n        /*\n        $chnanelId = $articleInfo[&#39;channel_id&#39;];\n        $chnanelFace = config(&#39;temp.chanel_to_face&#39;);\n        $cate = $chnanelFace[$chnanelId] ?? &#39;&#39;;\n\n        if($cate) &#123;\n            $info = Db::name(&#39;attachment&#39;)\n                -&gt;field(&#39;url&#39;)\n                -&gt;where([&#39;category&#39; =&gt; $cate])\n                -&gt;orderRaw(&#39;rand()&#39;)\n                -&gt;find();\n\n            var_dump($info);exit;\n        &#125;\n        */\n\n\n        Db::name(&#39;sprider_article&#39;)\n            -&gt;where(&#39;id&#39;, $articleInfo[&#39;id&#39;])\n            -&gt;update($update);\n        return [&#39;res&#39; =&gt; 1, &#39;msg&#39; =&gt; &#39;更新文章详情成功&#39;];\n    &#125;\n\n    function http_curl($url)\n    &#123;\n\n        // 1. 初始化\n        $ch = curl_init();\n        // 2. 设置选项，包括URL\n        curl_setopt($ch, CURLOPT_URL, $url);\n        //curl_setopt($ch,CURLOPT_HEADER,0);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);//测试号写上这个是跳过SSL证书检查，返回结果才不会null;\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);//禁止curl资源直接输出\n        // 3.抓取url并把它传递给服务器\n        $opt = curl_exec($ch);\n        // 4. 释放curl句柄\n        curl_close($ch);\n        return $opt;\n    &#125;\n\n\n&#125;\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"asd\"><a href=\"#asd\" class=\"headerlink\" title=\"asd\"></a>asd</h2><pre><code class=\"language-php\">\n\n&lt;?php\nnamespace app\\service;\n\nuse app\\admin\\model\\article\\ContentRule;\nuse app\\common\\model\\Attachment;\nuse QL\\QueryList;\nuse think\\Cache;\nuse think\\Db;\nuse think\\Exception;\n\nclass ArticleDetailService\n&#123;\n    private static $REGEX_RULES = [\n        // 规则1: 删除src以/开头的&lt;img&gt;标签 (不区分大小写，.匹配换行)\n        &#39;img_rule&#39; =&gt; &#39;/&lt;img\\s+[^&gt;]*?src\\s*=\\s*[&quot;\\&#39;]\\/[^&quot;\\&#39;]*[&quot;\\&#39;][^&gt;]*&gt;/is&#39;,\n\n        // 规则2: 删除包含XSMB123.com的&lt;p&gt;标签 (不区分大小写，.匹配换行)\n        &#39;p_rule&#39; =&gt; &#39;/&lt;p\\b[^&gt;]*&gt;(?:(?!&lt;\\/p&gt;).)*?XSMB123\\.com.*?&lt;\\/p&gt;/is&#39;,\n\n        // 规则3: 删除特定div标签 (.匹配换行)\n        &#39;div_rule&#39; =&gt; &#39;/&lt;div\\s+class=&quot;bg-info-subtle\\s+rounded\\s+p-3\\s+mb-3\\s+fs-6&quot;[^&gt;]*&gt;.*?&lt;\\/div&gt;/s&#39;\n    ];\n\n    public function cleanContent($content, $nav = null)\n    &#123;\n        $content = preg_replace(&#39;/&lt;a.*?&gt;/&#39;, &#39;&#39;, $content);\n        $content = str_replace(&#39;&lt;/a&gt;&#39;, &#39;&#39;, $content);\n        if($nav)&#123;\n            $content = preg_replace(&#39;/&lt;nav&gt;.*&lt;\\/nav&gt;/is&#39;, $nav, $content);\n        &#125;\n        // 第一层：删除特定div\n        $content = preg_replace(self::$REGEX_RULES[&#39;div_rule&#39;], &#39;&#39;, $content);\n        // 第二层：删除包含XSMB123的段落\n        $content = preg_replace(self::$REGEX_RULES[&#39;p_rule&#39;], &#39;&#39;, $content);\n        // 第三层：删除本地图片\n        $content = preg_replace(self::$REGEX_RULES[&#39;img_rule&#39;], &#39;&#39;, $content);\n\n        return $content;\n\n    &#125;\n\n    public function celanXsmbContent($content)\n    &#123;\n        $content = preg_replace(&#39;/&lt;a.*?&gt;/&#39;, &#39;&#39;, $content);\n        $content = str_replace(&#39;&lt;/a&gt;&#39;, &#39;&#39;, $content);\n        // 第一层：删除特定div\n        $content = preg_replace(self::$REGEX_RULES[&#39;div_rule&#39;], &#39;&#39;, $content);\n        // 第二层：删除包含XSMB123的段落\n        $content = preg_replace(self::$REGEX_RULES[&#39;p_rule&#39;], &#39;&#39;, $content);\n        // 第三层：删除本地图片\n        $content = preg_replace(self::$REGEX_RULES[&#39;img_rule&#39;], &#39;&#39;, $content);\n\n        return $content;\n    &#125;\n\n    public function getSoiDetail($articleInfo)\n    &#123;\n        $link = $articleInfo[&#39;origin_link&#39;];\n        $html = Db::name(&#39;sprider_html&#39;)\n            -&gt;field(&quot;id,html&quot;)-&gt;where(&#39;link&#39;, $link)-&gt;find();\n\n        if (!empty($html)) &#123;\n            $html = $html[&#39;html&#39;];\n        &#125; else &#123;\n            $html = CommonService::httpCurl($link);\n            Db::name(&#39;sprider_html&#39;)-&gt;insert([&#39;link&#39; =&gt; $link, &#39;html&#39; =&gt; $html]);\n        &#125;\n\n        $ql = QueryList::html($html);\n        $content = $ql-&gt;find(&#39;.content&#39;)-&gt;html();\n\n\n        $nav = $ql-&gt;find(&#39;#ez-toc-container nav&#39;)-&gt;html();\n        $nav = &quot;&lt;nav&gt;&quot; . $nav . &quot;&lt;/nav&gt;&quot;;\n        $content = $this-&gt;cleanContent($content, $nav);\n        $update = [\n            &#39;is_detail&#39; =&gt; 1,\n            &#39;content&#39; =&gt; $content,\n        ];\n        Db::name(&#39;sprider_article&#39;)\n            -&gt;where(&#39;id&#39;, $articleInfo[&#39;id&#39;])\n            -&gt;update($update);\n        return [&#39;res&#39; =&gt; 1, &#39;msg&#39; =&gt; &#39;更新文章详情成功&#39;];\n    &#125;\n\n    public function getXsmbDetail($articleInfo)\n    &#123;\n        $link = $articleInfo[&#39;origin_link&#39;];\n        $html = Db::name(&#39;sprider_html&#39;)\n            -&gt;field(&quot;id,html&quot;)-&gt;where(&#39;link&#39;, $link)-&gt;find();\n\n        $html = $this-&gt;http_curl($link);\n        //Db::name(&#39;sprider_html&#39;)-&gt;insert([&#39;link&#39;=&gt;$link,&#39;html&#39;=&gt;$html]);\n\n        $ql = QueryList::html($html);\n\n        $content = $ql-&gt;find(&#39;.the__article&#39;)-&gt;html();\n\n        $header = $ql-&gt;find(&#39;.list__subpage&#39;)-&gt;html();\n        $content = str_replace($header, &#39; &#39;, $content);\n        $imgIcon = $ql-&gt;find(&#39;.align-items-center&#39;)-&gt;html();\n\n        $content = str_replace($imgIcon, &#39; &#39;, $content);\n\n        $ads = $ql-&gt;find(&#39;.adsbygoogle&#39;)-&gt;htmls()-&gt;toArray();\n\n        if ($ads) &#123;\n            foreach ($ads as $item) &#123;\n                if ($item) &#123;\n                    $content = str_replace($item, &#39; &#39;, $content);\n                &#125;\n            &#125;\n        &#125;\n\n        $content = $this-&gt;cleanContent($content);\n        $update = [\n            &#39;is_detail&#39; =&gt; 1,\n            &#39;content&#39; =&gt; $content,\n        ];\n\n        //更换face\n        /*\n        $chnanelId = $articleInfo[&#39;channel_id&#39;];\n        $chnanelFace = config(&#39;temp.chanel_to_face&#39;);\n        $cate = $chnanelFace[$chnanelId] ?? &#39;&#39;;\n\n        if($cate) &#123;\n            $info = Db::name(&#39;attachment&#39;)\n                -&gt;field(&#39;url&#39;)\n                -&gt;where([&#39;category&#39; =&gt; $cate])\n                -&gt;orderRaw(&#39;rand()&#39;)\n                -&gt;find();\n\n            var_dump($info);exit;\n        &#125;\n        */\n\n\n        Db::name(&#39;sprider_article&#39;)\n            -&gt;where(&#39;id&#39;, $articleInfo[&#39;id&#39;])\n            -&gt;update($update);\n        return [&#39;res&#39; =&gt; 1, &#39;msg&#39; =&gt; &#39;更新文章详情成功&#39;];\n    &#125;\n\n    function http_curl($url)\n    &#123;\n\n        // 1. 初始化\n        $ch = curl_init();\n        // 2. 设置选项，包括URL\n        curl_setopt($ch, CURLOPT_URL, $url);\n        //curl_setopt($ch,CURLOPT_HEADER,0);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);//测试号写上这个是跳过SSL证书检查，返回结果才不会null;\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);//禁止curl资源直接输出\n        // 3.抓取url并把它传递给服务器\n        $opt = curl_exec($ch);\n        // 4. 释放curl句柄\n        curl_close($ch);\n        return $opt;\n    &#125;\n\n\n&#125;\n</code></pre>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}